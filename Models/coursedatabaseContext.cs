// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using courseapp.ViewMobel;

namespace courseapp.Models
{
    public partial class coursedatabaseContext : DbContext
    {
       

        public coursedatabaseContext(DbContextOptions<coursedatabaseContext> options): base(options)
        {
        }

        public coursedatabaseContext()
        {
        }

        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<CourseLesson> CourseLesson { get; set; }
        public virtual DbSet<Trainee> Trainee { get; set; }
        public virtual DbSet<TraineeCourses> TraineeCourses { get; set; }
        public virtual DbSet<Trainer> Trainer { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-T8SNIET\\MSSQLSERVER01;Initial Catalog=\"course database2\";Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Category_Category_Id");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Course)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Course_Category_Id");

                entity.HasOne(d => d.Trainer)
                    .WithMany(p => p.Course)
                    .HasForeignKey(d => d.TrainerId)
                    .HasConstraintName("FK_Course_Trainer_Id");
            });

            modelBuilder.Entity<CourseLesson>(entity =>
            {
                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseLesson)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Course_Lesson_Category_Id");
            });

            modelBuilder.Entity<Trainee>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<TraineeCourses>(entity =>
            {
                entity.HasKey(e => new { e.TraineeId, e.CourseId });

                entity.Property(e => e.CourseId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.TraineeCourses)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Trainee_Courses_Course_Id");

                entity.HasOne(d => d.Trainee)
                    .WithMany(p => p.TraineeCourses)
                    .HasForeignKey(d => d.TraineeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Trainee_Courses_Trainee_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public DbSet<courseapp.ViewMobel.CourseModelView> CourseModelView { get; set; }

        public DbSet<courseapp.ViewMobel.CategoryModelView> CategoryModelView { get; set; }

        //public DbSet<courseapp.ViewMobel.CourseModelView>? CourseModelView { get; set; }
    }
}